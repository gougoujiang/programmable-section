<!--
The MIT License

Copyright (c) 2004-2010, Sun Microsystems, Inc., Kohsuke Kawaguchi, CloudBees, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->

<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:local="local">
    <st:documentation>
        Outer most tag for creating a heterogeneous list, where the user can choose arbitrary number of
        arbitrary items from the given list of descriptors, and configure them independently.

        The submission can be data-bound into List&lt;T> where T is the common base type for the describable instances.

        For databinding use, please use &lt;f:repeatableHeteroProperty />
    
        <st:attribute name="name" use="required">
            form name that receives an array for all the items in the heterogeneous list.
        </st:attribute>
        <st:attribute name="items" use="required" type="java.util.Collection">
            existing items to be displayed. Something iterable, such as array or collection.
        </st:attribute>
        <st:attribute name="descriptors" use="required">
            all types that the user can add.
        </st:attribute>
        <st:attribute name="addCaption">
            caption of the 'add' button.
        </st:attribute>
        <st:attribute name="deleteCaption">
            caption of the 'delete' button.
        </st:attribute>
        <st:attribute name="targetType">
            the type for which descriptors will be configured. Defaults to ${it.class} (optional)
        </st:attribute>
        <st:attribute name="hasHeader">
            For each item, add a caption from descriptor.getDisplayName().
            This also activates drag&amp;drop (where the header is a grip), and help text support.
        </st:attribute>
        <st:attribute name="oneEach">
            If true, only allow up to one instance per descriptor.
        </st:attribute>
        <st:attribute name="menuAlign">
            Menu alignment against the button. Defaults to tl-bl
        </st:attribute>
        <st:attribute name="honorOrder">
            If true, insert new addition by default to their 'desired' location, which
            is the order induced by the descriptors.
        </st:attribute>
        <st:attribute name="collapseAll">
            If true, collapse all for the first load of the control.
            If false, expand all for the first load of the control.
        </st:attribute>
        <st:attribute name="expandUnique">
            If true, expand only one child div under the control for the first load of the control.
            If true, click the "+" will expand the div and collapse others.
        </st:attribute>
        <st:attribute name="showMore">
            If this is true, there will be a Show More button available, show 2 items as default, and show 5 items every click the button until all 
            expanded, if all expanded, the text of this button changes to Collapse, the event of it changes accordingly to show the default 2 items, others hide.
        </st:attribute>
        <st:attribute name="title">
            The hetore-list title
        </st:attribute>        
    </st:documentation>
    <style>
        .icon {
            /* don't change width and height in order to change the size of the icon,
            you can control the size with font-size for different class(es) - below */
            line-height: 100%;
            width: 1em;
            height: 1em;
            position: relative;
            display: block;
            float: left;            
            cursor: pointer;
        }
        /* Plus */
        .icon-plus,
        .icon-plus:after {
            position: absolute;
            width: .375em;
            height: .375em;
            border-style: solid;
            border-color: rgb(102, 102, 102); /* #666 */
        }
        .icon-plus {
            top: 0;
            left: 0;
            border-width: 0 .25em .25em 0;
        }
        .icon-plus:after {
            content: "";
            top: .375em;
            left: .375em;
            border-width: .25em 0 0 .25em;
        }
        /* Minus */
        .icon-minus {
            position: absolute;
            top: .375em;
            left: 0;
            width: 1em;
            height: .25em;
            background-color: rgb(102, 102, 102); /* #666 */
        }
        /* empty class for position */
        div.cc-handle {
        
        }
        .custom-hetero-list-container .dd-handle, .repeated-container .dd-handle {
            cursor: move;
            background-image: url(../images/grip.png);
            background-repeat: repeat-y;
            padding-left: 20px;
        }

        .custom-hetero-list-container.with-drag-drop .repeated-chunk.hover {
            border: 2px dashed #CCC;
        }

        .custom-hetero-list-container.with-drag-drop .repeated-chunk {
            border: 2px dashed transparent;
            padding: 0.5em;
            margin-top: 0.5em;
            margin-bottom: 0.5em;
        }
        fieldset.custom-hetero-list-child-border {
            border: 0px gray dashed;
        }
        fieldset.custom-hetero-list-out-border {
            border-left:        2px white solid;
            border-right:      2px white solid;
            border-bottom:  2px white solid;
            border-top:        2px #ccc solid;
        }
        fieldset.custom-hetero-list-out-border:hover {
            border: 2px #ccc dashed;
        }
    </style>
    <script>
        function customShowMore(obj) {
            var root = obj.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement;    
            var divs = root.children;
            var count = divs.length;
            if(obj.innerHTML === "Show More") {
                var showMoreCount = 5;
                for (var i = 0; i &lt; count; i++) {
                    if (divs[i].className == "repeated-chunk" &amp;&amp; divs[i].getAttribute("showmore") === "true") {
                        if (showMoreCount &gt; 0 &amp;&amp; divs[i].style.display === "none") {
                            divs[i].style.display = "block";
                            showMoreCount--;
                        }
                    }
                }
                var collapseId = true;
                for (var i = 0; i &lt; count; i++) {
                    if (divs[i].className == "repeated-chunk" &amp;&amp; divs[i].getAttribute("showmore") === "true") {
                        if (divs[i].style.display === "none") {
                            collapseId = false;
                        }
                    }
                }
                if (collapseId === true) {
                    obj.innerHTML = "Collapse";
                }
            }
            <!--collapse all-->
            else {
                var showMoreCount = 2;
                for (var i = 0; i &lt; count; i++) {
                    if (divs[i].className == "repeated-chunk" &amp;&amp; divs[i].getAttribute("showmore") === "true") {
                        if (showMoreCount &gt; 0) {
                            divs[i].style.display = "block";
                            showMoreCount--;
                        } else {
                            divs[i].style.display = "none";
                        }
                    }
                }
                obj.innerHTML = "Show More";
            }
            <!--refresh the list-->
            customRefreshList(root);
        }
        <!--refresh the show more button status-->
        function customRefreshList(listroot) {
<!--            Items	            Button Show	Button Hidden
                   0 items		                           Yes
After delete on the screen:
                   1 show, 0 hidden		         Yes
                   2 show, 0 hidden          		Yes
                   0 show, > 1 hidden	Yes	
                   1 show, > 1 hidden	Yes	
                   > 2 items	                  Yes
-->  
            var c = listroot.getElementsBySelector("div.showmore")[0];
            var divs = listroot.getElementsBySelector("div.repeated-chunk[showmore=true]");
                        
            if (divs.length &gt; 0 &amp;&amp;c!=null) {
                c.style.display = "block";
                var hiddenCount = 0;
                for (var i = 0;i!=divs.length;i++) {
                    if (divs[i].style.display ==="none") {
                        hiddenCount++;
                    }
                }
                if (hiddenCount &gt; 0) {
                    c.style.display = "block";
                    return 
                } else if ( divs.length &gt; 2) {
                    c.style.display = "block";
                } else if (divs.length &lt; 3 &amp;&amp; hiddenCount === 0) {
                    c.style.display = "none";
                }
            } else if(divs.length === 0 &amp;&amp;c!=null) {
                c.style.display = "none";
            }                
        }
        function customActiveBorder(elem) {
            var legend = elem.parentElement.parentElement.parentElement.parentElement.parentElement;
            var div = legend.nextElementSibling;
            if (div.style.display === "block" || div.style.display === "") {
                div.style.display = "none";
                elem.children[0].children[0].className = "icon-plus";
            } else if (div.style.display === "none") {
                div.style.display = "block";
                elem.children[0].children[0].className = "icon-minus";
            }
        }
        function customActiveDiv(elem) {      
            var legend = elem.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement;            
            var div = legend.nextElementSibling;
            
            var originalState = div.style.display;
        
            var fieldset = legend.parentElement;
    
            var collapseAll = fieldset.getAttribute("collapseall");
            var expandUnique = fieldset.getAttribute("expandunique");
        
            if (expandUnique === "true") {
                var root = fieldset.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement;
                var divblocks = root.getElementsBySelector("fieldset > div");
                var length = divblocks.length;
        
                for (var i = 0;i&lt;length;i++) {
                console.log(divblocks[i]);
                    divblocks[i].style.display = "none";
                }
                var inputs = root.getElementsBySelector("div.custom-cc-handle > a");
                length = inputs.length;
                for (var i = 0;i&lt;length;i++) {
                    inputs[i].children[0].children[0].className = "icon-plus";
                }
            }
              
            if (originalState === "block") {
                div.style.display = "none";
                elem.children[0].children[0].className = "icon-plus";
            } else {
                div.style.display = "block";                
                elem.children[0].children[0].className = "icon-minus";
            }
        }
    </script>
    <d:taglib uri="local">
        <d:tag name="body0">
            <table width="100%">
                <tr>
                        <td style="width: 1px"/>
                        <td style="width: 99%" colspan="2">
                            <fieldset collapseAll="${collapseAll==null?null:collapseAll}" 
                                      expandUnique="${expandUnique==null?null:expandUnique}" 
                                      class="custom-hetero-list-child-border">      
                                <legend>
                                    <div class="dd-handle" style="padding-left: 0px; background-image: none;">          
                                        <j:set var="show" value="display: block;" />
                                        <j:if test="${expandUnique eq true}">
                                            <j:set var="show" value="display: none;" />
                                        </j:if>
                                        <j:if test="${expandUnique ne true}">
                                            <j:if test="${collapseAll eq true}">
                                                <j:set var="show" value="display: none;"/>
                                            </j:if>
                                            <j:if test="${collapseAll ne true}">
                                                <j:set var="show" value="display: block;"/>
                                            </j:if>
                                        </j:if>
                                    <table>
                                        <j:set var="help" value="${descriptor.helpFile}" />
                                        <j:if test="${hasHeader}">
                                            <tr>
                                                <td>
                                                    <div class="cc-handle custom-cc-handle">
                                                        <j:if test="${show=='display: none;'}">
                                                            <a onclick="customActiveDiv(this)">
                                                                <span class="icon">
                                                                    <span class="icon-plus"></span>
                                                                </span>
                                                            </a>                                                            
                                                        </j:if>
                                                        <j:if test="${show=='display: block;'}">
                                                            <a onclick="customActiveDiv(this)">
                                                                <span class="icon">
                                                                    <span class="icon-minus"></span>
                                                                </span>
                                                            </a>
                                                        </j:if>
                                                    </div>
                                                </td>
                                                <td>
                                                    <j:set var="n" value="${instance.name}"/>
                                                    <j:if test="${n == null}">
                                                        <b>${descriptor.displayName}</b>
                                                    </j:if>
                                                    <j:if test="${n != null}">
                                                        <b>${descriptor.displayName}: ${n}</b>
                                                    </j:if>
                                                </td>                                
                                            </tr>                            
                                        </j:if>
                                    </table>  
                                </div>
                            </legend>
                            <div style="${show}" >
                                <table style="width:100%">
                                    <d:invokeBody/>
                                    <f:block>
                                        <div align="right">
                                            <input type="hidden" name="stapler-class" value="${descriptor.clazz.name}" />
                                            <f:repeatableDeleteButton value="${attrs.deleteCaption}" />
                                        </div>
                                    </f:block>
                                </table>
                            </div>
                            <input type="hidden" name="kind" value="${descriptor.id}" />
                        </fieldset> 
                    </td>
                    <td />
                    <td style="width: 20px;">
                        <j:if test="${help!=null}">
                            <a href="#" class="help-button" helpURL="${rootURL}${help}">
                                <img src="${imagesURL}/16x16/help.png" alt="[help]" height="16" width="16"/>
                           </a>
                        </j:if>
                    </td>
                </tr>
                <!-- TODO: help support is unintuitive; people should be able to see help from drop-down menu -->
                <j:if test="${help!=null}">
                    <f:helpArea />
                </j:if>
           </table>          
        </d:tag>
        <d:tag name="body1">
                <table width="100%">
                    <tr>
                        <td style="width: 1px"/>
                        <td style="width: 99%" colspan="2">
                            <fieldset collapseAll="${collapseAll==null?null:collapseAll}" 
                                      expandunique="${expandUnique==null?null:expandUnique}" 
                                      class="custom-hetero-list-child-border">                                                            
                                <legend>
                                    <div class="dd-handle" style="padding-left: 0px; background-image: none;">
                                    <j:set var="show" value="display: block;" />
                                    <j:if test="${expandUnique eq true}">
                                        <j:set var="show" value="display: block;" />
                                    </j:if>
                                    <j:if test="${expandUnique ne true}">
                                        <j:if test="${collapseAll eq true}">
                                            <j:set var="show" value="display: none;"/>
                                        </j:if>
                                        <j:if test="${collapseAll ne true}">
                                            <j:set var="show" value="display: block;"/>
                                        </j:if>
                                    </j:if>

                                    <table>
                                        <j:set var="help" value="${descriptor.helpFile}" />
                                        <j:if test="${hasHeader}">
                                            <tr>
                                                <td>
                                                    <div class="cc-handle custom-cc-handle">
                                                        <j:if test="${show=='display: none;'}">
                                                            <a onclick="customActiveDiv(this)">
                                                                <span class="icon">
                                                                    <span class="icon-plus"></span>
                                                                </span>
                                                            </a>
                                                        </j:if>
                                                        <j:if test="${show=='display: block;'}">
                                                            <a onclick="customActiveDiv(this)">
                                                                <span class="icon">
                                                                    <span class="icon-minus"></span>
                                                                </span>
                                                            </a>
                                                        </j:if>
                                                    </div>
                                                </td>
                                                <td>                                                        
                                                    <j:set var="n" value="${instance.name}"/>
                                                    <j:if test="${n == null}">
                                                        <b>${descriptor.displayName}</b>
                                                    </j:if>
                                                    <j:if test="${n != null}">
                                                        <b>${descriptor.displayName}: ${n}</b>
                                                    </j:if>
                                                </td>
                                            </tr>                            
                                        </j:if>
                                    </table>    
                                </div>
                                </legend>
                                        
                                <div style="${show}" >
                                    <table style="width:100%">
                                        <d:invokeBody/>
                                        <f:block>
                                            <div align="right">
                                                <input type="hidden" name="stapler-class" value="${descriptor.clazz.name}" />
                                                <f:repeatableDeleteButton value="${attrs.deleteCaption}" />
                                            </div>
                                        </f:block>
                                    </table>
                                </div>
                                <input type="hidden" name="kind" value="${descriptor.id}" />
                            </fieldset>
                        </td>
                        <td/>
                        <td style="width: 20px;">
                            <j:if test="${help!=null}">                                   
                                <a href="#" class="help-button" helpURL="${rootURL}${help}">
                                    <img src="${imagesURL}/16x16/help.png" alt="[help]" height="16" width="16"/>
                                </a>                                   
                            </j:if>
                        </td>
                    </tr>               
                    <!-- TODO: help support is unintuitive; people should be able to see help from drop-down menu -->
                    <j:if test="${help!=null}">
                        <f:helpArea />
                    </j:if>               
                </table>       
            
        </d:tag>
    </d:taglib>
    
    <script>       

        Behaviour.specify("DIV.custom-hetero-list-container", 'custom-hetero-list', -100, function(e) {
            e=$(e);
            if(isInsideRemovable(e))    return;

            var menu = document.createElement("SELECT");
            var btns = findElementsBySelector(e,"INPUT.hetero-list-add"),
            btn = btns[btns.length-1]; 
 
            YAHOO.util.Dom.insertAfter(menu,btn);

            var prototypes = $(e.lastChild);
            while(!prototypes.hasClassName("prototypes"))
                prototypes = prototypes.previous();
            var insertionPoint = prototypes.previous();  

            var templates = []; var i=0;
            $(prototypes).childElements().each(function (n) {
                var name = n.getAttribute("name");
                var tooltip = n.getAttribute("tooltip");
                var descriptorId = n.getAttribute("descriptorId");
                menu.options[i] = new Option(n.getAttribute("title"),""+i);
                templates.push({html:n.innerHTML, name:name, tooltip:tooltip,descriptorId:descriptorId});
                i++;
            });
            Element.remove(prototypes);

            var withDragDrop = initContainerDD(e);

            var menuAlign = (btn.getAttribute("menualign")||"tl-bl");

            var menuButton = new YAHOO.widget.Button(btn, { type: "menu", menu: menu, menualignment: menuAlign.split("-") });
            $(menuButton._button).addClassName(btn.className); 
            $(menuButton._button).setAttribute("suffix",btn.getAttribute("suffix"));
            menuButton.getMenu().clickEvent.subscribe(function(type,args,value) {
                var item = args[1];
                if (item.cfg.getProperty("disabled"))   return;
                var t = templates[parseInt(item.value)];

                var nc = document.createElement("div");
                nc.className = "repeated-chunk";
                nc.setAttribute("name",t.name);
                nc.setAttribute("descriptorId",t.descriptorId);
                nc.innerHTML = t.html;
                $(nc).setOpacity(0);

                var scroll = document.body.scrollTop;

                renderOnDemand(findElementsBySelector(nc,"TR.config-page")[0],function() {
                function findInsertionPoint() {
                    function findBestPosition(prospect,current,order) {
                        function desirability(pos) {
                            var count=0;
                            for (var i=0; i&lt;current.length; i++) {
                                if ((i&lt;pos) == (order(current[i])&lt;=order(prospect)))
                                    count++;
                            }
                            return count;
                        }
                        
                        var bestScore = -1;
                        var bestPos = 0;
                        for (var i=0; i&lt;=current.length; i++) {
                            var d = desirability(i);
                            if (bestScore&lt;=d) {
                                bestScore = d;
                                bestPos = i;
                            }
                        }
                        return bestPos;
                    }

                    var current = e.childElements().findAll(function(e) {return e.match("DIV.repeated-chunk")});

                    function o(did) {
                        if (Object.isElement(did))
                            did = did.getAttribute("descriptorId");
                        for (var i=0; i&lt;templates.length; i++)
                            if (templates[i].descriptorId==did)
                                return i;
                        return 0; 
                    }

                    var bestPos = findBestPosition(t.descriptorId, current, o);
                    if (bestPos&lt;current.length)
                        return current[bestPos];
                    else
                        return insertionPoint;
                }
                (e.hasClassName("honor-order") ? findInsertionPoint() : insertionPoint).insert({before:nc});

                if(withDragDrop)    prepareDD(nc);

                new YAHOO.util.Anim(nc, {
                    opacity: { to:1 }
                }, 0.2, YAHOO.util.Easing.easeIn).animate();

                Behaviour.applySubtree(nc,true);
                ensureVisible(nc);
                layoutUpdateCallback.call();                
            },true);
        });
       

    menuButton.getMenu().renderEvent.subscribe(function() {
    <!--// hook up tooltip for menu items-->
            var items = menuButton.getMenu().getItems();
            for(i=0; i&lt; items.length; i++) {
                var t = templates[i].tooltip;
                if(t!=null)
                    applyTooltip(items[i].element,t);
            }
        });        

    if (e.hasClassName("one-each")) {
            <!--// does this container already has a ocnfigured instance of the specified descriptor ID?-->
            function has(id) {
                return Prototype.Selector.find(e.childElements(),"DIV.repeated-chunk[descriptorId=\""+id+"\"]")!=null;
            }

            menuButton.getMenu().showEvent.subscribe(function() {
                var items = menuButton.getMenu().getItems();
                for(i=0; i &lt; items.length; i++) {
                    items[i].cfg.setProperty("disabled",has(templates[i].descriptorId));
                }
            });
        }
        });

        Behaviour.specify("DIV.custom-cc-handle", 'custom-hetero-list', -100, function(e) {        
            e=$(e);
            var legend0 = e.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement;
            var root = legend0.nextSibling;
            var divroot = legend0.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement;
            var heretoRoot = divroot.parentElement;
            
            var buttons = root.getElementsBySelector("span.repeatable-delete > span.first-child > button");
            customRefreshList(heretoRoot);
            var btn = buttons[buttons.length - 1];
            YAHOO.util.Event.addListener(btn, "click", function(e) {
                divroot.remove();
                customRefreshList(heretoRoot);
            });
            e.on("mouseover",function() {
                $(this).up(".repeated-chunk").addClassName("hover");
            });
            e.on("mouseout",function() {
                $(this).up(".repeated-chunk").removeClassName("hover");
            });
        });
    </script>
    <j:set var="targetType" value="${attrs.targetType?:it.class}"/>
    <fieldset class="custom-hetero-list-out-border">
        <legend>
            <table>
                <tr>
                    <td>
                        <a onclick="customActiveBorder(this)">
                            <span class="icon">
                                <span class="icon-minus"></span>
                            </span>
                        </a>
                    </td>
                    <td>
                        <b>${attrs.title}</b>
                    </td>
                </tr>
            </table>
        </legend>
        <div>
            <div class="custom-hetero-list-container ${hasHeader?'with-drag-drop':''} ${attrs.oneEach?'one-each':''} ${attrs.honorOrder?'honor-order':''}">
                <!-- display existing items -->
                <j:set var="index" value="0"/>
                <j:set var="showMoreCount" value="0" />
                <j:if test="${attrs.showMore eq true}" >
                    <j:set var="showMoreCount" value="2" />
                </j:if> 
                <j:forEach var="i" items="${attrs.items}">
                    <j:set var="descriptor" value="${i.descriptor}" />
                    <j:set var="instance" value="${i}" />
                    <j:set var="showMoreStyle" value="display:none;"/>
                    <j:if test="${attrs.showMore eq true}">
                        <j:if test="${showMoreCount > 0}">                        
                            <j:set var="showMoreStyle" value="display:block;"/>
                            <j:set var="showMoreCount" value="${showMoreCount - 1}" />
                        </j:if>
                    </j:if>
                    <j:if test="${attrs.showMore ne true}">
                        <j:set var="showMoreStyle" value="display:block;"/>
                    </j:if>
                    <div name="${attrs.name}" class="repeated-chunk" descriptorId="${descriptor.id}" style="${showMoreStyle}" showmore="${attrs.showMore eq true}">
                        <j:if test="${index eq 0}">
                            <local:body1 deleteCaption="${attrs.deleteCaption}">
                                <st:include from="${descriptor}" page="${descriptor.configPage}" optional="true" />
                            </local:body1>
                        </j:if>
                        <j:if test="${index ne 0}">
                            <local:body0 deleteCaption="${attrs.deleteCaption}">
                                <st:include from="${descriptor}" page="${descriptor.configPage}" optional="true" />
                            </local:body0>
                        </j:if>
                        <j:set var="index" value="${index+1}"/>
                    </div>
                </j:forEach>
                <div class="repeatable-insertion-point" />
                <div class="prototypes to-be-removed">
                    <!-- render one prototype for each type -->
                    <j:set var="instance" value="${null}" />
                    <j:forEach var="descriptor" items="${attrs.descriptors}" varStatus="loop">
                        <div name="${attrs.name}" title="${descriptor.displayName}" tooltip="${descriptor.tooltip}" descriptorId="${descriptor.id}">
                            <local:body0 deleteCaption="${attrs.deleteCaption}">
                                <l:renderOnDemand tag="tr" clazz="config-page" capture="descriptor,it,instance">
                                    <l:ajax>
                                        <st:include from="${descriptor}" page="${descriptor.configPage}" optional="true" />
                                    </l:ajax>
                                </l:renderOnDemand>
                            </local:body0>
                        </div>
                    </j:forEach>
                </div>
                <f:prepareDatabinding/>
                <div class="showmore"> 
                    <table width="100%">
                        <j:if test="${attrs.showMore eq true}">
                            <tr>
                                <td style="width: 8px"/>
                                <td>
                                    <div>
                                        <span class="yui-button">
                                            <span class="first-child">
                                                <j:if test="${attrs.items.size() lt 3}">
                                                    <button style="display:none" showMore="showMore" type="button" onclick="customShowMore(this)">Show More</button>                                        
                                                </j:if>
                                                <j:if test="${attrs.items.size() gt 2}">
                                                    <button showMore="showMore" type="button" onclick="customShowMore(this)">Show More</button>                                        
                                                </j:if>
                                            </span>
                                        </span>
                                    </div>
                                </td>
                            </tr>
                        </j:if>                
                    </table>
                </div>
                <br/>
                <div fillurl="${attrs.fillUrl}"> 
                    <table width="100%">                
                        <tr>
                            <td>
                                <input type="button" value="${attrs.addCaption?:'%Add'}" class="hetero-list-add" menualign="${attrs.menuAlign}" suffix="${attrs.name}"/>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </fieldset>   
</j:jelly>
