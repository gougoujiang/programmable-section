<!--
The MIT License

Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->

<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form">
  <st:documentation>on
    Radio button with a label that hides additional controls.
    When checked, those additional controls are displayed. This is useful
    for presenting mutually exclusive options, where each option comes
    with a sub-form that provides additional configuration.

    <st:attribute name="name" use="required">
      Name of the radio button group. Radio buttons that are mutually exclusive need
      to have the same name.
    </st:attribute>
    <st:attribute name="value" use="required">
      @value of the &lt;input> element.
    </st:attribute>
    <st:attribute name="title" use="required">
      Human readable label text to be rendered next to the radio button.
    </st:attribute>
    <st:attribute name="checked" use="required" type="boolean">
      Should this control be initially checked or not?
    </st:attribute>
    <st:attribute name="inline">
      if present, the folded section will not be grouped into a separate JSON object upon submission.
    </st:attribute>
    <st:attribute name="help">
      If specified, the (?) help icon will be rendered on the right,
      for in place help text. See &lt;f:entry> for the details.
    </st:attribute>
  </st:documentation>
  <script>
      // prototype object to be duplicated for each radio button group
var radioBlockSupport = {
    buttons : null, // set of functions, one for updating one radio block each

    updateButtons : function() {
        for( var i=0; i&lt;this.buttons.length; i++ )
            this.buttons[i]();
    },

    // update one block based on the status of the given radio button
    updateSingleButton : function(radio, blockStart, blockEnd) {
        var show = radio.checked;
        blockStart = $(blockStart);

        if (blockStart.getAttribute('hasHelp') == 'true') {
            n = blockStart.next();
        } else {
            n = blockStart;
        }
        while((n = n.next()) != blockEnd) {
          n.style.display = show ? "" : "none";
        }
        layoutUpdateCallback.call();
    }
};

// this needs to happen before TR.row-set-end rule kicks in.
Behaviour.specify("INPUT.radio-block-control", 'radioBlock', -99, function(r) {
        r.id = "radio-block-"+(iota++);
        if (r.getAttribute("checked") === "true") {
            r.checked = true;
        }
        // when one radio button is clicked, we need to update foldable block for
        // other radio buttons with the same name. To do this, group all the
        // radio buttons with the same name together and hang it under the form object
        var f = r.form;
        var radios = f.radios;
        if (radios == null)
            f.radios = radios = {};

        var g = radios[r.name];
        if (g == null) {
            radios[r.name] = g = object(radioBlockSupport);
            g.buttons = [];
        }

        var s = findAncestorClass(r,"radio-block-start");
        s.setAttribute("ref", r.id);

        // find the end node
        var e = (function() {
            var e = s;
            var cnt=1;
            while(cnt&gt;0) {
                e = $(e).next();
                if (Element.hasClassName(e,"radio-block-start"))
                    cnt++;
                if (Element.hasClassName(e,"radio-block-end"))
                    cnt--;
            }
            return e;
        })();

        var u = function() {
            g.updateSingleButton(r,s,e);
        };
        g.buttons.push(u);

        // apply the initial visibility
        u();

        // install event handlers to update visibility.
        // needs to use onclick and onchange for Safari compatibility
        r.onclick = r.onchange = function() { g.updateButtons(); };
});

  </script>

	<tr class="radio-block-start ${attrs.inline?'':'row-set-start'}" hasHelp="${attrs.help!=null}"><!-- this ID marks the beginning -->
	  <td colspan="3">
      <label>
	      <input type="radio" name="${name}" value="${value}"
             class="radio-block-control" checked="${checked?'true':null}" />
        ${title}
      </label>
    </td>
    <j:if test="${attrs.help!=null}">
      <td>
        <a href="#" class="help-button" helpURL="${rootURL}${help}"><img src="${imagesURL}/16x16/help.png" alt="Help for feature: ${title}" height="16" width="16" /></a>
      </td>
    </j:if>
	</tr>
  <j:if test="${attrs.help!=null}">
    <f:helpArea />
  </j:if>
	<d:invokeBody />
	<!-- end marker -->
	<tr class="${attrs.inline?'':'row-set-end'} radio-block-end" style="display:none" />
</j:jelly>
